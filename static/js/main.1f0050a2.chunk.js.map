{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","robots.js","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","username","App","onSearchChange","event","setState","target","value","state","fetch","then","Response","json","users","this","filteredRobots","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"sNAeeA,EAbF,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GACzB,OACI,yBAAKC,UAAW,uDACZ,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,aACrB,6BACI,4BAAKF,GACL,2BAAIC,MCeLK,EApBE,SAAC,GAAe,IAAbC,EAAY,EAAZA,OAChB,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAMC,GACd,OACI,kBAAC,EAAD,CACIC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCmB9BW,EAbG,SAAC,GAAkC,EAAhCC,YAAiC,IAApBC,EAAmB,EAAnBA,aACjC,OACC,yBAAKX,UAAU,OACf,2BACCA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MC1BAP,EAAS,CAClB,CACEL,GAAI,EACJF,KAAM,gBACNkB,SAAU,OACVjB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,eACNkB,SAAU,YACVjB,MAAO,qBAET,CACEC,GAAI,EACJF,KAAM,mBACNkB,SAAU,WACVjB,MAAO,sBAET,CACEC,GAAI,EACJF,KAAM,mBACNkB,SAAU,WACVjB,MAAO,6BAET,CACEC,GAAI,EACJF,KAAM,mBACNkB,SAAU,SACVjB,MAAO,4BAET,CACEC,GAAI,EACJF,KAAM,uBACNkB,SAAU,mBACVjB,MAAO,2BAET,CACEC,GAAI,EACJF,KAAM,kBACNkB,SAAU,eACVjB,MAAO,0BAET,CACEC,GAAI,EACJF,KAAM,2BACNkB,SAAU,gBACVjB,MAAO,wBAET,CACEC,GAAI,EACJF,KAAM,kBACNkB,SAAU,WACVjB,MAAO,2BAET,CACEC,GAAI,GACJF,KAAM,qBACNkB,SAAU,iBACVjB,MAAO,2BC2BEkB,E,YA1Cd,aAAe,IAAD,8BACb,+CAaDC,eAAiB,SAACC,GACjB,EAAKC,SAAS,CAAET,YAAaQ,EAAME,OAAOC,SAb1C,EAAKC,MAAQ,CACZlB,OAAQA,EACRM,YAAa,IAJD,E,gFAQS,IAAD,OACfa,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAEf,OAAQuB,S,+BAQnC,IAAD,SAC6BC,KAAKN,MAA7BlB,EADL,EACKA,OACRyB,GAFG,EACanB,YACCkB,KAAKN,MAAMlB,OAAO0B,QAAQ,SAAA1B,GAChD,OAAOA,EAAOP,KAAKkC,cAAcC,SAAS,EAAKV,MAAMZ,YAAYqB,mBAExD,OAAQ3B,EAAO6B,OAGX,yBAAKjC,UAAU,MACX,0CACH,kBAAC,EAAD,CAAWW,aAAciB,KAAKX,iBAC3B,gCACA,kBAAI,EAAJ,CAAab,OAAQyB,MANzB,2C,GA1BEK,aC/BEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.1f0050a2.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n    return (\n        <div className= 'tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='robots' src={`https://robohash.org/${id}200x200`} />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n        \n     );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots}) => {\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return  (\n                        <Card\n                            key={i}\n                            id={robots[i].id}\n                            name={robots[i].name}\n                            email={robots[i].email}\n                        />\n                    );\n                } )\n            }\n\n        </div>\n    );\n}\n\nexport default CardList;","/* import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return(  \n        <div className='pa2'>\n            <input\n                className= 'pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots' \n                onChange={searchChange}\n            />\n        </div>\n    );\n} \n\nexport default SearchBox;    */\n\nimport React from 'react';\n\nconst SearchBox = ({ searchfield, searchChange }) => {\n\treturn(\n\t\t<div className='pa2'>\n\t\t<input \n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\n\t\t\ttype='search' \n\t\t\tplaceholder='search robots'\n\t\t\tonChange={searchChange}\n\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchBox;\n","export const robots = [\n    {\n      id: 1,\n      name: 'Leanne Graham',\n      username: 'Bret',\n      email: 'Sincere@april.biz'\n    },\n    {\n      id: 2,\n      name: 'Ervin Howell',\n      username: 'Antonette',\n      email: 'Shanna@melissa.tv'\n    },\n    {\n      id: 3,\n      name: 'Clementine Bauch',\n      username: 'Samantha',\n      email: 'Nathan@yesenia.net'\n    },\n    {\n      id: 4,\n      name: 'Patricia Lebsack',\n      username: 'Karianne',\n      email: 'Julianne.OConner@kory.org'\n    },\n    {\n      id: 5,\n      name: 'Chelsey Dietrich',\n      username: 'Kamren',\n      email: 'Lucio_Hettinger@annie.ca'\n    },\n    {\n      id: 6,\n      name: 'Mrs. Dennis Schulist',\n      username: 'Leopoldo_Corkery',\n      email: 'Karley_Dach@jasper.info'\n    },\n    {\n      id: 7,\n      name: 'Kurtis Weissnat',\n      username: 'Elwyn.Skiles',\n      email: 'Telly.Hoeger@billy.biz'\n    },\n    {\n      id: 8,\n      name: 'Nicholas Runolfsdottir V',\n      username: 'Maxime_Nienow',\n      email: 'Sherwood@rosamond.me'\n    },\n    {\n      id: 9,\n      name: 'Glenna Reichert',\n      username: 'Delphine',\n      email: 'Chaim_McDermott@dana.io'\n    },\n    {\n      id: 10,\n      name: 'Clementina DuBuque',\n      username: 'Moriah.Stanton',\n      email: 'Rey.Padberg@karina.biz'\n    }\n  ];\n  ","/* import React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport { robots } from './robots';\nimport './App.css'; \n\n\nclass App  extends Component{\n    constructor() {\n        super()\n        this.state = {\n            robots: robots,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value })\n        \n     }\n\n    render() {\n        const filteredRobots = this.state.robots.filter(robots => {\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n        return (\n            <div className='tc'>\n                <h1 className='f1'>RoboFriends</h1>\n                <SearchBox searchChange={this.oneSearchChange}/>\n                <CardList robots={filteredRobots}/>\n            </div>\n        );\n    }\n}\n \nexport default App;   */\n\nimport React, { Component } from 'react';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox';\nimport scroll from './Scroll';\nimport { robots } from './robots';\n\nclass App extends Component{\n\tconstructor() { \n\t\tsuper()\n\t\tthis.state = {\n\t\t\trobots: robots,\n\t\t\tsearchfield: ''\n\t\t}\n\t}\n\n    componentDiMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(Response => Response.json())\n        .then(users => this.setState({ robots: users}));\n    }\n\n\tonSearchChange = (event) => {\n\t\tthis.setState({ searchfield: event.target.value })\n\t\t\n\t}\n\n\trender () {\n        const { robots, searchfield } = this.state;\n\t\tconst filteredRobots = this.state.robots.filter( robots => {\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\n        })\n            return !robots.length?\n                <h1>Loading</h1> :\n            (\n                <div className='tc'>\n                    <h1>RoboFiends</h1>\n                 <SearchBox searchChange={this.onSearchChange} />\n                    <scroll>\n                    <   CardList robots={filteredRobots}/>\n                    </scroll>\n                </div>\n            );    \n\t\t\n    }\n}\n\t\n\n\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n  "],"sourceRoot":""}